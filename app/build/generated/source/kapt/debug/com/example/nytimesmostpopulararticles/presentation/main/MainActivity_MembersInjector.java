// Generated by Dagger (https://dagger.dev).
package com.example.nytimesmostpopulararticles.presentation.main;

import com.example.nytimesmostArticlearticles.ViewModelProviderFactory;
import com.example.nytimesmostpopulararticles.presentation.base.BaseActivity_MembersInjector;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<DispatchingAndroidInjector<Object>> fragmentDispatchingAndroidInjectorProvider;

  private final Provider<ViewModelProviderFactory> factoryProvider;

  public MainActivity_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> fragmentDispatchingAndroidInjectorProvider,
      Provider<ViewModelProviderFactory> factoryProvider) {
    this.fragmentDispatchingAndroidInjectorProvider = fragmentDispatchingAndroidInjectorProvider;
    this.factoryProvider = factoryProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<DispatchingAndroidInjector<Object>> fragmentDispatchingAndroidInjectorProvider,
      Provider<ViewModelProviderFactory> factoryProvider) {
    return new MainActivity_MembersInjector(fragmentDispatchingAndroidInjectorProvider, factoryProvider);}

  @Override
  public void injectMembers(MainActivity instance) {
    BaseActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(instance, fragmentDispatchingAndroidInjectorProvider.get());
    injectFactory(instance, factoryProvider.get());
  }

  @InjectedFieldSignature("com.example.nytimesmostpopulararticles.presentation.main.MainActivity.factory")
  public static void injectFactory(MainActivity instance, ViewModelProviderFactory factory) {
    instance.factory = factory;
  }
}
