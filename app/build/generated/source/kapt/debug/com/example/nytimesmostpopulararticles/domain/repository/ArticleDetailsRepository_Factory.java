// Generated by Dagger (https://dagger.dev).
package com.example.nytimesmostpopulararticles.domain.repository;

import com.example.nytimesmostpopulararticles.data.local.AppDatabase;
import com.example.nytimesmostpopulararticles.data.remote.ApiService;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ArticleDetailsRepository_Factory implements Factory<ArticleDetailsRepository> {
  private final Provider<AppDatabase> mAppDatabaseProvider;

  private final Provider<ApiService> apiServiceProvider;

  private final Provider<String> apiKeyProvider;

  public ArticleDetailsRepository_Factory(Provider<AppDatabase> mAppDatabaseProvider,
      Provider<ApiService> apiServiceProvider, Provider<String> apiKeyProvider) {
    this.mAppDatabaseProvider = mAppDatabaseProvider;
    this.apiServiceProvider = apiServiceProvider;
    this.apiKeyProvider = apiKeyProvider;
  }

  @Override
  public ArticleDetailsRepository get() {
    return newInstance(mAppDatabaseProvider.get(), apiServiceProvider.get(), apiKeyProvider.get());
  }

  public static ArticleDetailsRepository_Factory create(Provider<AppDatabase> mAppDatabaseProvider,
      Provider<ApiService> apiServiceProvider, Provider<String> apiKeyProvider) {
    return new ArticleDetailsRepository_Factory(mAppDatabaseProvider, apiServiceProvider, apiKeyProvider);
  }

  public static ArticleDetailsRepository newInstance(AppDatabase mAppDatabase,
      ApiService apiService, String apiKey) {
    return new ArticleDetailsRepository(mAppDatabase, apiService, apiKey);
  }
}
