// Generated by Dagger (https://dagger.dev).
package com.example.nytimesmostpopulararticles.di.component;

import android.app.Application;
import android.content.Context;
import com.example.nytimesmostArticlearticles.ViewModelProviderFactory;
import com.example.nytimesmostArticlearticles.ViewModelProviderFactory_Factory;
import com.example.nytimesmostArticlearticles.di.module.AppModule;
import com.example.nytimesmostArticlearticles.di.module.AppModule_ProvideApiKeyFactory;
import com.example.nytimesmostArticlearticles.di.module.AppModule_ProvideApiServiceFactory;
import com.example.nytimesmostArticlearticles.di.module.AppModule_ProvideAppDatabaseFactory;
import com.example.nytimesmostArticlearticles.di.module.AppModule_ProvideArticleDataSourceFactory;
import com.example.nytimesmostArticlearticles.di.module.AppModule_ProvideArticleDetailsDataSourceFactory;
import com.example.nytimesmostArticlearticles.di.module.AppModule_ProvideArticleFavoritesDataSourceFactory;
import com.example.nytimesmostArticlearticles.di.module.AppModule_ProvideContextFactory;
import com.example.nytimesmostArticlearticles.di.module.AppModule_ProvideRetrofitFactory;
import com.example.nytimesmostpopulararticles.CustomApplication;
import com.example.nytimesmostpopulararticles.CustomApplication_MembersInjector;
import com.example.nytimesmostpopulararticles.data.ArticleDataSource;
import com.example.nytimesmostpopulararticles.data.ArticleDetailsDataSource;
import com.example.nytimesmostpopulararticles.data.ArticleFavoritesDataSource;
import com.example.nytimesmostpopulararticles.data.local.AppDatabase;
import com.example.nytimesmostpopulararticles.data.remote.ApiService;
import com.example.nytimesmostpopulararticles.di.builder.ActivityBuilder_BindMainActivity;
import com.example.nytimesmostpopulararticles.domain.repository.ArticleDetailsRepository;
import com.example.nytimesmostpopulararticles.domain.repository.ArticleDetailsRepository_Factory;
import com.example.nytimesmostpopulararticles.domain.repository.ArticleFavoritesRepository;
import com.example.nytimesmostpopulararticles.domain.repository.ArticleFavoritesRepository_Factory;
import com.example.nytimesmostpopulararticles.domain.repository.ArticleRepository;
import com.example.nytimesmostpopulararticles.domain.repository.ArticleRepository_Factory;
import com.example.nytimesmostpopulararticles.presentation.base.BaseActivity_MembersInjector;
import com.example.nytimesmostpopulararticles.presentation.main.MainActivity;
import com.example.nytimesmostpopulararticles.presentation.main.MainActivity_MembersInjector;
import com.example.nytimesmostpopulararticles.presentation.main.article.ArticleFragment;
import com.example.nytimesmostpopulararticles.presentation.main.article.ArticleFragmentProvider_ProvideArticleFragmentFactory;
import com.example.nytimesmostpopulararticles.presentation.main.article.ArticleFragment_MembersInjector;
import com.example.nytimesmostpopulararticles.presentation.main.article_details.ArticleDetailsFragment;
import com.example.nytimesmostpopulararticles.presentation.main.article_details.ArticleDetailsFragmentProvider_ProvideArticleDetailsFragmentFactory;
import com.example.nytimesmostpopulararticles.presentation.main.article_details.ArticleDetailsFragment_MembersInjector;
import com.example.nytimesmostpopulararticles.presentation.main.favorites.FavoritesFragment;
import com.example.nytimesmostpopulararticles.presentation.main.favorites.FavoritesFragmentProvider_ProvideFavoritesFragmentFactory;
import com.example.nytimesmostpopulararticles.presentation.main.favorites.FavoritesFragment_MembersInjector;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<String> provideApiKeyProvider;

  private Provider<ArticleRepository> articleRepositoryProvider;

  private Provider<ArticleDataSource> provideArticleDataSourceProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private Provider<ArticleDetailsRepository> articleDetailsRepositoryProvider;

  private Provider<ArticleDetailsDataSource> provideArticleDetailsDataSourceProvider;

  private Provider<ArticleFavoritesRepository> articleFavoritesRepositoryProvider;

  private Provider<ArticleFavoritesDataSource> provideArticleFavoritesDataSourceProvider;

  private Provider<ViewModelProviderFactory> viewModelProviderFactoryProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application applicationParam) {

    initialize(appModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.provideRetrofitProvider = DoubleCheck.provider(AppModule_ProvideRetrofitFactory.create(appModuleParam));
    this.provideApiServiceProvider = DoubleCheck.provider(AppModule_ProvideApiServiceFactory.create(appModuleParam, provideRetrofitProvider));
    this.provideApiKeyProvider = AppModule_ProvideApiKeyFactory.create(appModuleParam);
    this.articleRepositoryProvider = DoubleCheck.provider(ArticleRepository_Factory.create(provideApiServiceProvider, provideApiKeyProvider));
    this.provideArticleDataSourceProvider = DoubleCheck.provider(AppModule_ProvideArticleDataSourceFactory.create(appModuleParam, articleRepositoryProvider));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = DoubleCheck.provider(AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider));
    this.provideAppDatabaseProvider = DoubleCheck.provider(AppModule_ProvideAppDatabaseFactory.create(appModuleParam, provideContextProvider));
    this.articleDetailsRepositoryProvider = DoubleCheck.provider(ArticleDetailsRepository_Factory.create(provideAppDatabaseProvider, provideApiServiceProvider, provideApiKeyProvider));
    this.provideArticleDetailsDataSourceProvider = DoubleCheck.provider(AppModule_ProvideArticleDetailsDataSourceFactory.create(appModuleParam, articleDetailsRepositoryProvider));
    this.articleFavoritesRepositoryProvider = DoubleCheck.provider(ArticleFavoritesRepository_Factory.create(provideAppDatabaseProvider));
    this.provideArticleFavoritesDataSourceProvider = DoubleCheck.provider(AppModule_ProvideArticleFavoritesDataSourceFactory.create(appModuleParam, articleFavoritesRepositoryProvider));
    this.viewModelProviderFactoryProvider = DoubleCheck.provider(ViewModelProviderFactory_Factory.create(provideArticleDataSourceProvider, provideArticleDetailsDataSourceProvider, provideArticleFavoritesDataSourceProvider));
  }

  @Override
  public void inject(CustomApplication app) {
    injectCustomApplication(app);}

  private CustomApplication injectCustomApplication(CustomApplication instance) {
    CustomApplication_MembersInjector.injectActivityDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_BindMainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuilder_BindMainActivity.MainActivitySubcomponent {
    private Provider<ArticleFragmentProvider_ProvideArticleFragmentFactory.ArticleFragmentSubcomponent.Factory> articleFragmentSubcomponentFactoryProvider;

    private Provider<ArticleDetailsFragmentProvider_ProvideArticleDetailsFragmentFactory.ArticleDetailsFragmentSubcomponent.Factory> articleDetailsFragmentSubcomponentFactoryProvider;

    private Provider<FavoritesFragmentProvider_ProvideFavoritesFragmentFactory.FavoritesFragmentSubcomponent.Factory> favoritesFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(ArticleFragment.class, (Provider) articleFragmentSubcomponentFactoryProvider).put(ArticleDetailsFragment.class, (Provider) articleDetailsFragmentSubcomponentFactoryProvider).put(FavoritesFragment.class, (Provider) favoritesFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.articleFragmentSubcomponentFactoryProvider = new Provider<ArticleFragmentProvider_ProvideArticleFragmentFactory.ArticleFragmentSubcomponent.Factory>() {
        @Override
        public ArticleFragmentProvider_ProvideArticleFragmentFactory.ArticleFragmentSubcomponent.Factory get(
            ) {
          return new ArticleFragmentSubcomponentFactory();}
      };
      this.articleDetailsFragmentSubcomponentFactoryProvider = new Provider<ArticleDetailsFragmentProvider_ProvideArticleDetailsFragmentFactory.ArticleDetailsFragmentSubcomponent.Factory>() {
        @Override
        public ArticleDetailsFragmentProvider_ProvideArticleDetailsFragmentFactory.ArticleDetailsFragmentSubcomponent.Factory get(
            ) {
          return new ArticleDetailsFragmentSubcomponentFactory();}
      };
      this.favoritesFragmentSubcomponentFactoryProvider = new Provider<FavoritesFragmentProvider_ProvideFavoritesFragmentFactory.FavoritesFragmentSubcomponent.Factory>() {
        @Override
        public FavoritesFragmentProvider_ProvideFavoritesFragmentFactory.FavoritesFragmentSubcomponent.Factory get(
            ) {
          return new FavoritesFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectFactory(instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
      return instance;
    }

    private final class ArticleFragmentSubcomponentFactory implements ArticleFragmentProvider_ProvideArticleFragmentFactory.ArticleFragmentSubcomponent.Factory {
      @Override
      public ArticleFragmentProvider_ProvideArticleFragmentFactory.ArticleFragmentSubcomponent create(
          ArticleFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ArticleFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ArticleFragmentSubcomponentImpl implements ArticleFragmentProvider_ProvideArticleFragmentFactory.ArticleFragmentSubcomponent {
      private ArticleFragmentSubcomponentImpl(ArticleFragment arg0) {

      }

      @Override
      public void inject(ArticleFragment arg0) {
        injectArticleFragment(arg0);}

      private ArticleFragment injectArticleFragment(ArticleFragment instance) {
        ArticleFragment_MembersInjector.injectFactory(instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class ArticleDetailsFragmentSubcomponentFactory implements ArticleDetailsFragmentProvider_ProvideArticleDetailsFragmentFactory.ArticleDetailsFragmentSubcomponent.Factory {
      @Override
      public ArticleDetailsFragmentProvider_ProvideArticleDetailsFragmentFactory.ArticleDetailsFragmentSubcomponent create(
          ArticleDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ArticleDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ArticleDetailsFragmentSubcomponentImpl implements ArticleDetailsFragmentProvider_ProvideArticleDetailsFragmentFactory.ArticleDetailsFragmentSubcomponent {
      private ArticleDetailsFragmentSubcomponentImpl(ArticleDetailsFragment arg0) {

      }

      @Override
      public void inject(ArticleDetailsFragment arg0) {
        injectArticleDetailsFragment(arg0);}

      private ArticleDetailsFragment injectArticleDetailsFragment(ArticleDetailsFragment instance) {
        ArticleDetailsFragment_MembersInjector.injectFactory(instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class FavoritesFragmentSubcomponentFactory implements FavoritesFragmentProvider_ProvideFavoritesFragmentFactory.FavoritesFragmentSubcomponent.Factory {
      @Override
      public FavoritesFragmentProvider_ProvideFavoritesFragmentFactory.FavoritesFragmentSubcomponent create(
          FavoritesFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new FavoritesFragmentSubcomponentImpl(arg0);
      }
    }

    private final class FavoritesFragmentSubcomponentImpl implements FavoritesFragmentProvider_ProvideFavoritesFragmentFactory.FavoritesFragmentSubcomponent {
      private FavoritesFragmentSubcomponentImpl(FavoritesFragment arg0) {

      }

      @Override
      public void inject(FavoritesFragment arg0) {
        injectFavoritesFragment(arg0);}

      private FavoritesFragment injectFavoritesFragment(FavoritesFragment instance) {
        FavoritesFragment_MembersInjector.injectFactory(instance, DaggerAppComponent.this.viewModelProviderFactoryProvider.get());
        return instance;
      }
    }
  }
}
