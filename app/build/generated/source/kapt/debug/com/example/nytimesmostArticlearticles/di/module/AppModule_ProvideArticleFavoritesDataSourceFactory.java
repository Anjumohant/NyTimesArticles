// Generated by Dagger (https://dagger.dev).
package com.example.nytimesmostArticlearticles.di.module;

import com.example.nytimesmostpopulararticles.data.ArticleFavoritesDataSource;
import com.example.nytimesmostpopulararticles.domain.repository.ArticleFavoritesRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideArticleFavoritesDataSourceFactory implements Factory<ArticleFavoritesDataSource> {
  private final AppModule module;

  private final Provider<ArticleFavoritesRepository> articleFavoritesRepositoryProvider;

  public AppModule_ProvideArticleFavoritesDataSourceFactory(AppModule module,
      Provider<ArticleFavoritesRepository> articleFavoritesRepositoryProvider) {
    this.module = module;
    this.articleFavoritesRepositoryProvider = articleFavoritesRepositoryProvider;
  }

  @Override
  public ArticleFavoritesDataSource get() {
    return provideArticleFavoritesDataSource(module, articleFavoritesRepositoryProvider.get());
  }

  public static AppModule_ProvideArticleFavoritesDataSourceFactory create(AppModule module,
      Provider<ArticleFavoritesRepository> articleFavoritesRepositoryProvider) {
    return new AppModule_ProvideArticleFavoritesDataSourceFactory(module, articleFavoritesRepositoryProvider);
  }

  public static ArticleFavoritesDataSource provideArticleFavoritesDataSource(AppModule instance,
      ArticleFavoritesRepository ArticleFavoritesRepository) {
    return Preconditions.checkNotNull(instance.provideArticleFavoritesDataSource(ArticleFavoritesRepository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
