// Generated by Dagger (https://dagger.dev).
package com.example.nytimesmostpopulararticles.presentation.main.article;

import com.example.nytimesmostArticlearticles.ViewModelProviderFactory;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ArticleFragment_MembersInjector implements MembersInjector<ArticleFragment> {
  private final Provider<ViewModelProviderFactory> factoryProvider;

  public ArticleFragment_MembersInjector(Provider<ViewModelProviderFactory> factoryProvider) {
    this.factoryProvider = factoryProvider;
  }

  public static MembersInjector<ArticleFragment> create(
      Provider<ViewModelProviderFactory> factoryProvider) {
    return new ArticleFragment_MembersInjector(factoryProvider);}

  @Override
  public void injectMembers(ArticleFragment instance) {
    injectFactory(instance, factoryProvider.get());
  }

  @InjectedFieldSignature("com.example.nytimesmostpopulararticles.presentation.main.article.ArticleFragment.factory")
  public static void injectFactory(ArticleFragment instance, ViewModelProviderFactory factory) {
    instance.factory = factory;
  }
}
